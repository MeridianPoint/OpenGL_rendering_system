#version 120

varying vec3 N;
varying vec3 v;
//uniform vec2 Alpha;

//uniform vec3 Tangent;
//uniform vec3 binormalDirection;


void main(){
	vec2 Alpha=vec2(0.05,0.7);
	vec3 Tangent=vec3(1.0,0.0,0.0);
	vec3 binormalDirection=vec3(0.0,1.0,0.0);

	float Ka=0.2;
	flaot Kd=0.3;

	vec3 L = normalize(gl_LightSource[0].position.xyz - v);
	vec3 E = normalize(-v);
	vec3 R = normalize(-reflect(L, N));
	vec3 H =normalize(v+R);

	vec4 ambient,diffuse,specularReflection;

	ambient = (gl_FrontLightProduct[0].ambient+gl_FrontLightProduct[1].ambient)*gl_FrontMaterial.ambient/2.0;
	diffuse = (gl_FrontLightProduct[0].diffuse+gl_FrontLightProduct[1].diffuse)*max(dot(N, L), 0.0) /2.0;

	if (dot(N, L) < 0.0) // light source on the wrong side
            {
               specularReflection = vec4(0.0, 0.0, 0.0,1.0); 
                  // no specular reflection
            }
	else{
		float dotHN = dot(H, N);
        float dotVN = dot(v, N);
        float dotHTAlphaX = dot(H, Tangent) / Alpha.x;
        float dotHBAlphaY = dot(H,binormalDirection) / Alpha.y;
 
        specularReflection = (gl_FrontLightProduct[0].specular+gl_FrontLightProduct[1].specular)/2.0 * sqrt(max(0.0, dot(N, L) / dot(v,N))) * exp(-2.0 * (dotHTAlphaX * dotHTAlphaX + dotHBAlphaY * dotHBAlphaY) / (1.0 + dotHN));
	}
	gl_FragColor=ambient*Ka+diffuse*Kd+specularReflection;
}